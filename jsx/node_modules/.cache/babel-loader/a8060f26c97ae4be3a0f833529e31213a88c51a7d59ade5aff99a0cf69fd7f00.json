{"ast":null,"code":"import _slicedToArray from\"C:/Users/risha/OneDrive/Desktop/Web Developement/ReactJS/jsx/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function TextForm(props){var handleUpClick=function handleUpClick(){setText(text.toUpperCase());//This will convert the text in textArea to uppercase.\nprops.showAlert(\"Converted to UpperCase!\",\"Success\");};var handleLoClick=function handleLoClick(){setText(text.toLowerCase());//This will convert the text in textArea to uppercase.\nprops.showAlert(\"Converted to LowerCase!\",\"Success\");};/*This function will run when we change the value in textarea, we have to make this \r\nfunction because we have fixed the value of textarea to be 'text', so using this function\r\nwe can change the value to what user want. */var handleOnChange=function handleOnChange(event){//Using this function we are changing value of 'text to 'text' + value entered by user. \nsetText(event.target.value);};var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];/* correct way to change value of text : setText(\"enter text\");\r\n    wrong way : text=\"new text\"; */return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{style:props.mode==='light'?{color:'black'}:{color:'white'},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"container my-3\",children:[/*#__PURE__*/_jsx(\"h1\",{children:props.heading}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-3\",children:/*#__PURE__*/_jsx(\"textarea\",{className:\"form-control\",placeholder:\"Enter text here\",value:text,onChange:handleOnChange,id:\"exampleFormControlTextarea1\",rows:\"6\",style:{backgroundColor:props.mode==='light'?'white':'grey',color:props.mode==='light'?'black':'white'}})}),/*#__PURE__*/_jsx(\"button\",{disabled:text.length===0,className:\"btn btn-primary my-3 mx-3\",onClick:handleUpClick,children:\"Convert to Uppercase\"}),/*#__PURE__*/_jsx(\"button\",{disabled:text.length===0,className:\"btn btn-primary mx-3 my-3\",onClick:handleLoClick,children:\"Convert to Lowercase\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"container my-3\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Your Text Summary\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"You have written \",text.split(/\\s+/).filter(function(element){return element.length!=0;}).length,\" words and \",text.length,\" characters.\"]})]})]})});}","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TextForm","props","handleUpClick","setText","text","toUpperCase","showAlert","handleLoClick","toLowerCase","handleOnChange","event","target","value","_useState","_useState2","_slicedToArray","children","style","mode","color","className","heading","placeholder","onChange","id","rows","backgroundColor","disabled","length","onClick","split","filter","element"],"sources":["C:/Users/risha/OneDrive/Desktop/Web Developement/ReactJS/jsx/src/Components/TextForm.js"],"sourcesContent":["import React,{useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = ()=>{\r\n    \r\n    setText(text.toUpperCase()); //This will convert the text in textArea to uppercase.\r\n    props.showAlert(\"Converted to UpperCase!\" , \"Success\");\r\n  }\r\n  const handleLoClick = ()=>{\r\n    setText(text.toLowerCase()); //This will convert the text in textArea to uppercase.\r\n    props.showAlert(\"Converted to LowerCase!\" , \"Success\");\r\n  }\r\n/*This function will run when we change the value in textarea, we have to make this \r\nfunction because we have fixed the value of textarea to be 'text', so using this function\r\nwe can change the value to what user want. */\r\n  const handleOnChange = (event)=>{\r\n//Using this function we are changing value of 'text to 'text' + value entered by user. \r\n    setText(event.target.value);  \r\n  }\r\n  const [text,setText] = useState(\"\");\r\n  /* correct way to change value of text : setText(\"enter text\");\r\n    wrong way : text=\"new text\"; */\r\n  return (\r\n    <>\r\n    <div style={props.mode==='light' ? {color:'black'} : {color:'white'}}>\r\n      <div className='container my-3'>  \r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" placeholder=\"Enter text here\" value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"6\" \r\n              style={{backgroundColor: props.mode==='light' ? 'white' : 'grey' ,\r\n                      color: props.mode==='light' ? 'black' : 'white'}}\r\n            ></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary my-3 mx-3\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-3 my-3\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h1>Your Text Summary</h1>\r\n{/* if text is : 'I am  rishabh' then .split will give {'I','am','','rishabh} , as there\r\nis an empty element so to filter this empty element we are using filter method of js.s \r\nHere text.split(/\\s+/) will split text in ' ' and when a user change the line.*/}\r\n        <p>You have written {text.split(/\\s+/).filter((element)=>{return element.length!=0}).length  } words and {text.length} characters.</p>\r\n      </div>\r\n    </div>  \r\n    </>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}